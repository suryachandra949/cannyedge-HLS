// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _canny_AXIvideo2Mat_8_1024_1024_0_s_HH_
#define _canny_AXIvideo2Mat_8_1024_1024_0_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct canny_AXIvideo2Mat_8_1024_1024_0_s : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > input_stream_TDATA;
    sc_in< sc_logic > input_stream_TVALID;
    sc_out< sc_logic > input_stream_TREADY;
    sc_in< sc_lv<1> > input_stream_TKEEP;
    sc_in< sc_lv<1> > input_stream_TSTRB;
    sc_in< sc_lv<1> > input_stream_TUSER;
    sc_in< sc_lv<1> > input_stream_TLAST;
    sc_in< sc_lv<1> > input_stream_TID;
    sc_in< sc_lv<1> > input_stream_TDEST;
    sc_in< sc_lv<12> > img_rows_V_dout;
    sc_in< sc_logic > img_rows_V_empty_n;
    sc_out< sc_logic > img_rows_V_read;
    sc_in< sc_lv<12> > img_cols_V_dout;
    sc_in< sc_logic > img_cols_V_empty_n;
    sc_out< sc_logic > img_cols_V_read;
    sc_out< sc_lv<8> > img_data_stream_V_din;
    sc_in< sc_logic > img_data_stream_V_full_n;
    sc_out< sc_logic > img_data_stream_V_write;
    sc_out< sc_lv<12> > img_rows_V_out_din;
    sc_in< sc_logic > img_rows_V_out_full_n;
    sc_out< sc_logic > img_rows_V_out_write;
    sc_out< sc_lv<12> > img_cols_V_out_din;
    sc_in< sc_logic > img_cols_V_out_full_n;
    sc_out< sc_logic > img_cols_V_out_write;


    // Module declarations
    canny_AXIvideo2Mat_8_1024_1024_0_s(sc_module_name name);
    SC_HAS_PROCESS(canny_AXIvideo2Mat_8_1024_1024_0_s);

    ~canny_AXIvideo2Mat_8_1024_1024_0_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_26;
    sc_signal< sc_lv<1> > eol_reg_170;
    sc_signal< sc_lv<8> > axi_data_V_1_i_reg_181;
    sc_signal< sc_lv<11> > p_7_i_reg_192;
    sc_signal< sc_lv<1> > eol_i_reg_203;
    sc_signal< sc_lv<1> > axi_last_V_2_i_reg_215;
    sc_signal< sc_lv<8> > p_Val2_s_reg_228;
    sc_signal< sc_lv<12> > rows_V_reg_338;
    sc_signal< bool > ap_sig_bdd_87;
    sc_signal< sc_lv<12> > cols_V_reg_343;
    sc_signal< sc_lv<8> > tmp_data_V_reg_348;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_99;
    sc_signal< sc_lv<1> > tmp_last_V_reg_356;
    sc_signal< sc_lv<1> > exitcond3_i_fu_298_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_113;
    sc_signal< sc_lv<11> > i_V_fu_303_p2;
    sc_signal< sc_lv<11> > i_V_reg_372;
    sc_signal< sc_lv<1> > exitcond_i_fu_313_p2;
    sc_signal< sc_lv<1> > exitcond_i_reg_377;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp1_stg0_fsm_4;
    sc_signal< bool > ap_sig_bdd_124;
    sc_signal< sc_lv<1> > brmerge_i_fu_327_p2;
    sc_signal< bool > ap_sig_bdd_132;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it0;
    sc_signal< bool > ap_sig_bdd_139;
    sc_signal< sc_logic > ap_reg_ppiten_pp1_it1;
    sc_signal< sc_lv<11> > j_V_fu_318_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_5;
    sc_signal< bool > ap_sig_bdd_158;
    sc_signal< bool > ap_sig_bdd_163;
    sc_signal< sc_lv<1> > axi_last_V_3_i_reg_241;
    sc_signal< sc_lv<1> > axi_last_V1_i_reg_139;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_6;
    sc_signal< bool > ap_sig_bdd_181;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_188;
    sc_signal< sc_lv<8> > axi_data_V_3_i_reg_253;
    sc_signal< sc_lv<8> > axi_data_V1_i_reg_149;
    sc_signal< sc_lv<11> > p_i_reg_159;
    sc_signal< sc_lv<1> > eol_phi_fu_173_p4;
    sc_signal< sc_lv<8> > axi_data_V_1_i_phi_fu_184_p4;
    sc_signal< sc_lv<1> > eol_i_phi_fu_207_p4;
    sc_signal< sc_lv<1> > ap_reg_phiprechg_axi_last_V_2_i_reg_215pp1_it0;
    sc_signal< sc_lv<8> > ap_reg_phiprechg_p_Val2_s_reg_228pp1_it0;
    sc_signal< sc_lv<1> > eol_2_i_reg_265;
    sc_signal< sc_lv<1> > sof_1_i_fu_82;
    sc_signal< sc_lv<12> > p_cast_i_fu_294_p1;
    sc_signal< sc_lv<12> > p_7_cast_i_fu_309_p1;
    sc_signal< sc_lv<1> > tmp_user_V_fu_285_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_sig_bdd_131;
    sc_signal< bool > ap_sig_bdd_211;
    sc_signal< bool > ap_sig_bdd_150;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_pp1_stg0_fsm_4;
    static const sc_lv<7> ap_ST_st7_fsm_5;
    static const sc_lv<7> ap_ST_st8_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<11> ap_const_lv11_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_phiprechg_axi_last_V_2_i_reg_215pp1_it0();
    void thread_ap_reg_phiprechg_p_Val2_s_reg_228pp1_it0();
    void thread_ap_sig_bdd_113();
    void thread_ap_sig_bdd_124();
    void thread_ap_sig_bdd_131();
    void thread_ap_sig_bdd_132();
    void thread_ap_sig_bdd_139();
    void thread_ap_sig_bdd_150();
    void thread_ap_sig_bdd_158();
    void thread_ap_sig_bdd_163();
    void thread_ap_sig_bdd_181();
    void thread_ap_sig_bdd_188();
    void thread_ap_sig_bdd_211();
    void thread_ap_sig_bdd_26();
    void thread_ap_sig_bdd_87();
    void thread_ap_sig_bdd_99();
    void thread_ap_sig_cseq_ST_pp1_stg0_fsm_4();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st7_fsm_5();
    void thread_ap_sig_cseq_ST_st8_fsm_6();
    void thread_axi_data_V_1_i_phi_fu_184_p4();
    void thread_brmerge_i_fu_327_p2();
    void thread_eol_i_phi_fu_207_p4();
    void thread_eol_phi_fu_173_p4();
    void thread_exitcond3_i_fu_298_p2();
    void thread_exitcond_i_fu_313_p2();
    void thread_i_V_fu_303_p2();
    void thread_img_cols_V_out_din();
    void thread_img_cols_V_out_write();
    void thread_img_cols_V_read();
    void thread_img_data_stream_V_din();
    void thread_img_data_stream_V_write();
    void thread_img_rows_V_out_din();
    void thread_img_rows_V_out_write();
    void thread_img_rows_V_read();
    void thread_input_stream_TREADY();
    void thread_j_V_fu_318_p2();
    void thread_p_7_cast_i_fu_309_p1();
    void thread_p_cast_i_fu_294_p1();
    void thread_tmp_user_V_fu_285_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
