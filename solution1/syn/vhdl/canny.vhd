-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny is
port (
    input_stream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TREADY : OUT STD_LOGIC;
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of canny is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "canny,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.368000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=13,HLS_SYN_DSP=21,HLS_SYN_FF=2724,HLS_SYN_LUT=2677}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal canny_Block_proc_U0_ap_start : STD_LOGIC;
    signal canny_Block_proc_U0_ap_done : STD_LOGIC;
    signal canny_Block_proc_U0_ap_continue : STD_LOGIC;
    signal canny_Block_proc_U0_ap_idle : STD_LOGIC;
    signal canny_Block_proc_U0_ap_ready : STD_LOGIC;
    signal canny_Block_proc_U0_img_0_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_Block_proc_U0_img_0_rows_V_out_full_n : STD_LOGIC;
    signal canny_Block_proc_U0_img_0_rows_V_out_write : STD_LOGIC;
    signal canny_Block_proc_U0_img_0_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_Block_proc_U0_img_0_cols_V_out_full_n : STD_LOGIC;
    signal canny_Block_proc_U0_img_0_cols_V_out_write : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_start : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_done : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_continue : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_idle : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_ready : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TVALID : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TREADY : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_empty_n : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_read : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_empty_n : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_read : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_full_n : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_write : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_full_n : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_write : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_full_n : STD_LOGIC;
    signal canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_write : STD_LOGIC;
    signal canny_GaussianBlur_U0_ap_start : STD_LOGIC := '0';
    signal canny_GaussianBlur_U0_ap_done : STD_LOGIC;
    signal canny_GaussianBlur_U0_ap_continue : STD_LOGIC;
    signal canny_GaussianBlur_U0_ap_idle : STD_LOGIC;
    signal canny_GaussianBlur_U0_ap_ready : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_GaussianBlur_U0_p_src_rows_V_empty_n : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_rows_V_read : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal canny_GaussianBlur_U0_p_src_cols_V_empty_n : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_cols_V_read : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_GaussianBlur_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_GaussianBlur_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal canny_GaussianBlur_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_ap_start : STD_LOGIC := '0';
    signal canny_Duplicate_1024_1024_0_0_U0_ap_done : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_ap_continue : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_ap_idle : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_ap_ready : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_empty_n : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_read : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_full_n : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_full_n : STD_LOGIC;
    signal canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal canny_Sobel_U0_ap_start : STD_LOGIC := '0';
    signal canny_Sobel_U0_ap_done : STD_LOGIC;
    signal canny_Sobel_U0_ap_continue : STD_LOGIC;
    signal canny_Sobel_U0_ap_idle : STD_LOGIC;
    signal canny_Sobel_U0_ap_ready : STD_LOGIC;
    signal canny_Sobel_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Sobel_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal canny_Sobel_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal canny_Sobel_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Sobel_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal canny_Sobel_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal canny_Sobel_1_U0_ap_start : STD_LOGIC := '0';
    signal canny_Sobel_1_U0_ap_done : STD_LOGIC;
    signal canny_Sobel_1_U0_ap_continue : STD_LOGIC;
    signal canny_Sobel_1_U0_ap_idle : STD_LOGIC;
    signal canny_Sobel_1_U0_ap_ready : STD_LOGIC;
    signal canny_Sobel_1_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Sobel_1_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal canny_Sobel_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal canny_Sobel_1_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Sobel_1_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal canny_Sobel_1_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal canny_grad_computation_U0_ap_start : STD_LOGIC := '0';
    signal canny_grad_computation_U0_ap_done : STD_LOGIC;
    signal canny_grad_computation_U0_ap_continue : STD_LOGIC;
    signal canny_grad_computation_U0_ap_idle : STD_LOGIC;
    signal canny_grad_computation_U0_ap_ready : STD_LOGIC;
    signal canny_grad_computation_U0_grad_x_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_grad_computation_U0_grad_x_data_stream_V_empty_n : STD_LOGIC;
    signal canny_grad_computation_U0_grad_x_data_stream_V_read : STD_LOGIC;
    signal canny_grad_computation_U0_grad_y_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_grad_computation_U0_grad_y_data_stream_V_empty_n : STD_LOGIC;
    signal canny_grad_computation_U0_grad_y_data_stream_V_read : STD_LOGIC;
    signal canny_grad_computation_U0_grad_out_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal canny_grad_computation_U0_grad_out_data_stream_V_full_n : STD_LOGIC;
    signal canny_grad_computation_U0_grad_out_data_stream_V_write : STD_LOGIC;
    signal canny_nonmax_supression_U0_ap_start : STD_LOGIC := '0';
    signal canny_nonmax_supression_U0_ap_done : STD_LOGIC;
    signal canny_nonmax_supression_U0_ap_continue : STD_LOGIC;
    signal canny_nonmax_supression_U0_ap_idle : STD_LOGIC;
    signal canny_nonmax_supression_U0_ap_ready : STD_LOGIC;
    signal canny_nonmax_supression_U0_grad_out_data_stream_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal canny_nonmax_supression_U0_grad_out_data_stream_V_empty_n : STD_LOGIC;
    signal canny_nonmax_supression_U0_grad_out_data_stream_V_read : STD_LOGIC;
    signal canny_nonmax_supression_U0_supressed_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_nonmax_supression_U0_supressed_data_stream_V_full_n : STD_LOGIC;
    signal canny_nonmax_supression_U0_supressed_data_stream_V_write : STD_LOGIC;
    signal canny_hysterisis_U0_ap_start : STD_LOGIC := '0';
    signal canny_hysterisis_U0_ap_done : STD_LOGIC;
    signal canny_hysterisis_U0_ap_continue : STD_LOGIC;
    signal canny_hysterisis_U0_ap_idle : STD_LOGIC;
    signal canny_hysterisis_U0_ap_ready : STD_LOGIC;
    signal canny_hysterisis_U0_supressed_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_hysterisis_U0_supressed_data_stream_V_empty_n : STD_LOGIC;
    signal canny_hysterisis_U0_supressed_data_stream_V_read : STD_LOGIC;
    signal canny_hysterisis_U0_hysterisis_Image_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_hysterisis_U0_hysterisis_Image_data_stream_V_full_n : STD_LOGIC;
    signal canny_hysterisis_U0_hysterisis_Image_data_stream_V_write : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start : STD_LOGIC := '0';
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_done : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_continue : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_idle : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_ready : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_read : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TVALID : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TREADY : STD_LOGIC;
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal img_0_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_full_n : STD_LOGIC;
    signal img_0_rows_V_channel_write : STD_LOGIC;
    signal img_0_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel_read : STD_LOGIC;
    signal img_0_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_full_n : STD_LOGIC;
    signal img_0_cols_V_channel_write : STD_LOGIC;
    signal img_0_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel_read : STD_LOGIC;
    signal img_0_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_full_n : STD_LOGIC;
    signal img_0_data_stream_0_V_write : STD_LOGIC;
    signal img_0_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_V_read : STD_LOGIC;
    signal img_0_rows_V_channel19_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_rows_V_channel19_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel19_full_n : STD_LOGIC;
    signal img_0_rows_V_channel19_write : STD_LOGIC;
    signal img_0_rows_V_channel19_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_rows_V_channel19_empty_n : STD_LOGIC;
    signal img_0_rows_V_channel19_read : STD_LOGIC;
    signal img_0_cols_V_channel20_U_ap_dummy_ce : STD_LOGIC;
    signal img_0_cols_V_channel20_din : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel20_full_n : STD_LOGIC;
    signal img_0_cols_V_channel20_write : STD_LOGIC;
    signal img_0_cols_V_channel20_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal img_0_cols_V_channel20_empty_n : STD_LOGIC;
    signal img_0_cols_V_channel20_read : STD_LOGIC;
    signal img_1_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_1_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_full_n : STD_LOGIC;
    signal img_1_data_stream_0_V_write : STD_LOGIC;
    signal img_1_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_V_read : STD_LOGIC;
    signal img_2_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_2_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_full_n : STD_LOGIC;
    signal img_2_data_stream_0_V_write : STD_LOGIC;
    signal img_2_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_V_read : STD_LOGIC;
    signal img_3_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal img_3_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_V_full_n : STD_LOGIC;
    signal img_3_data_stream_0_V_write : STD_LOGIC;
    signal img_3_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_V_read : STD_LOGIC;
    signal grad_x_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal grad_x_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_x_data_stream_0_V_full_n : STD_LOGIC;
    signal grad_x_data_stream_0_V_write : STD_LOGIC;
    signal grad_x_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_x_data_stream_0_V_empty_n : STD_LOGIC;
    signal grad_x_data_stream_0_V_read : STD_LOGIC;
    signal grad_y_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal grad_y_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_y_data_stream_0_V_full_n : STD_LOGIC;
    signal grad_y_data_stream_0_V_write : STD_LOGIC;
    signal grad_y_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal grad_y_data_stream_0_V_empty_n : STD_LOGIC;
    signal grad_y_data_stream_0_V_read : STD_LOGIC;
    signal grad_out_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal grad_out_data_stream_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grad_out_data_stream_0_V_full_n : STD_LOGIC;
    signal grad_out_data_stream_0_V_write : STD_LOGIC;
    signal grad_out_data_stream_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal grad_out_data_stream_0_V_empty_n : STD_LOGIC;
    signal grad_out_data_stream_0_V_read : STD_LOGIC;
    signal supressed_Image_data_stream_0_U_ap_dummy_ce : STD_LOGIC;
    signal supressed_Image_data_stream_0_din : STD_LOGIC_VECTOR (7 downto 0);
    signal supressed_Image_data_stream_0_full_n : STD_LOGIC;
    signal supressed_Image_data_stream_0_write : STD_LOGIC;
    signal supressed_Image_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal supressed_Image_data_stream_0_empty_n : STD_LOGIC;
    signal supressed_Image_data_stream_0_read : STD_LOGIC;
    signal hysterisis_Image_data_stream_0_U_ap_dummy_ce : STD_LOGIC;
    signal hysterisis_Image_data_stream_0_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hysterisis_Image_data_stream_0_full_n : STD_LOGIC;
    signal hysterisis_Image_data_stream_0_write : STD_LOGIC;
    signal hysterisis_Image_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal hysterisis_Image_data_stream_0_empty_n : STD_LOGIC;
    signal hysterisis_Image_data_stream_0_read : STD_LOGIC;
    signal ap_reg_procdone_canny_Block_proc_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_GaussianBlur_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_Sobel_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_Sobel_1_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_grad_computation_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_nonmax_supression_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_hysterisis_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;

    component canny_Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_0_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_rows_V_out_full_n : IN STD_LOGIC;
        img_0_rows_V_out_write : OUT STD_LOGIC;
        img_0_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_0_cols_V_out_full_n : IN STD_LOGIC;
        img_0_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component canny_AXIvideo2Mat_8_1024_1024_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_stream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        input_stream_TVALID : IN STD_LOGIC;
        input_stream_TREADY : OUT STD_LOGIC;
        input_stream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component canny_GaussianBlur IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_Duplicate_1024_1024_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_Sobel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_grad_computation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        grad_x_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        grad_x_data_stream_V_empty_n : IN STD_LOGIC;
        grad_x_data_stream_V_read : OUT STD_LOGIC;
        grad_y_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        grad_y_data_stream_V_empty_n : IN STD_LOGIC;
        grad_y_data_stream_V_read : OUT STD_LOGIC;
        grad_out_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        grad_out_data_stream_V_full_n : IN STD_LOGIC;
        grad_out_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_nonmax_supression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        grad_out_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        grad_out_data_stream_V_empty_n : IN STD_LOGIC;
        grad_out_data_stream_V_read : OUT STD_LOGIC;
        supressed_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        supressed_data_stream_V_full_n : IN STD_LOGIC;
        supressed_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_hysterisis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        supressed_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        supressed_data_stream_V_empty_n : IN STD_LOGIC;
        supressed_data_stream_V_read : OUT STD_LOGIC;
        hysterisis_Image_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        hysterisis_Image_data_stream_V_full_n : IN STD_LOGIC;
        hysterisis_Image_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component canny_Mat2AXIvideo_8_1022_1022_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        output_stream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_stream_TVALID : OUT STD_LOGIC;
        output_stream_TREADY : IN STD_LOGIC;
        output_stream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_canny_img_0_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_0_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_0_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_0_rows_V_channel19 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_0_cols_V_channel20 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_1_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_2_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_img_3_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_grad_x_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_grad_y_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_grad_out_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_supressed_Image_data_stream_0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_canny_hysterisis_Image_data_stream_0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    canny_Block_proc_U0 : component canny_Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_Block_proc_U0_ap_start,
        ap_done => canny_Block_proc_U0_ap_done,
        ap_continue => canny_Block_proc_U0_ap_continue,
        ap_idle => canny_Block_proc_U0_ap_idle,
        ap_ready => canny_Block_proc_U0_ap_ready,
        img_0_rows_V_out_din => canny_Block_proc_U0_img_0_rows_V_out_din,
        img_0_rows_V_out_full_n => canny_Block_proc_U0_img_0_rows_V_out_full_n,
        img_0_rows_V_out_write => canny_Block_proc_U0_img_0_rows_V_out_write,
        img_0_cols_V_out_din => canny_Block_proc_U0_img_0_cols_V_out_din,
        img_0_cols_V_out_full_n => canny_Block_proc_U0_img_0_cols_V_out_full_n,
        img_0_cols_V_out_write => canny_Block_proc_U0_img_0_cols_V_out_write);

    canny_AXIvideo2Mat_8_1024_1024_0_U0 : component canny_AXIvideo2Mat_8_1024_1024_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_start,
        ap_done => canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_done,
        ap_continue => canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_continue,
        ap_idle => canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_idle,
        ap_ready => canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_ready,
        input_stream_TDATA => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDATA,
        input_stream_TVALID => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TVALID,
        input_stream_TREADY => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TREADY,
        input_stream_TKEEP => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TKEEP,
        input_stream_TSTRB => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TSTRB,
        input_stream_TUSER => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TUSER,
        input_stream_TLAST => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TLAST,
        input_stream_TID => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TID,
        input_stream_TDEST => canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDEST,
        img_rows_V_dout => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_dout,
        img_rows_V_empty_n => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_empty_n,
        img_rows_V_read => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_read,
        img_cols_V_dout => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_dout,
        img_cols_V_empty_n => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_empty_n,
        img_cols_V_read => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_read,
        img_data_stream_V_din => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_full_n,
        img_data_stream_V_write => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_write,
        img_rows_V_out_din => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_full_n,
        img_rows_V_out_write => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_write,
        img_cols_V_out_din => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_full_n,
        img_cols_V_out_write => canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_write);

    canny_GaussianBlur_U0 : component canny_GaussianBlur
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_GaussianBlur_U0_ap_start,
        ap_done => canny_GaussianBlur_U0_ap_done,
        ap_continue => canny_GaussianBlur_U0_ap_continue,
        ap_idle => canny_GaussianBlur_U0_ap_idle,
        ap_ready => canny_GaussianBlur_U0_ap_ready,
        p_src_rows_V_dout => canny_GaussianBlur_U0_p_src_rows_V_dout,
        p_src_rows_V_empty_n => canny_GaussianBlur_U0_p_src_rows_V_empty_n,
        p_src_rows_V_read => canny_GaussianBlur_U0_p_src_rows_V_read,
        p_src_cols_V_dout => canny_GaussianBlur_U0_p_src_cols_V_dout,
        p_src_cols_V_empty_n => canny_GaussianBlur_U0_p_src_cols_V_empty_n,
        p_src_cols_V_read => canny_GaussianBlur_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => canny_GaussianBlur_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => canny_GaussianBlur_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => canny_GaussianBlur_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => canny_GaussianBlur_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => canny_GaussianBlur_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => canny_GaussianBlur_U0_p_dst_data_stream_V_write);

    canny_Duplicate_1024_1024_0_0_U0 : component canny_Duplicate_1024_1024_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_Duplicate_1024_1024_0_0_U0_ap_start,
        ap_done => canny_Duplicate_1024_1024_0_0_U0_ap_done,
        ap_continue => canny_Duplicate_1024_1024_0_0_U0_ap_continue,
        ap_idle => canny_Duplicate_1024_1024_0_0_U0_ap_idle,
        ap_ready => canny_Duplicate_1024_1024_0_0_U0_ap_ready,
        src_data_stream_V_dout => canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_dout,
        src_data_stream_V_empty_n => canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_empty_n,
        src_data_stream_V_read => canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_full_n,
        dst1_data_stream_V_write => canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_full_n,
        dst2_data_stream_V_write => canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_write);

    canny_Sobel_U0 : component canny_Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_Sobel_U0_ap_start,
        ap_done => canny_Sobel_U0_ap_done,
        ap_continue => canny_Sobel_U0_ap_continue,
        ap_idle => canny_Sobel_U0_ap_idle,
        ap_ready => canny_Sobel_U0_ap_ready,
        p_src_data_stream_V_dout => canny_Sobel_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => canny_Sobel_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => canny_Sobel_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => canny_Sobel_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => canny_Sobel_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => canny_Sobel_U0_p_dst_data_stream_V_write);

    canny_Sobel_1_U0 : component canny_Sobel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_Sobel_1_U0_ap_start,
        ap_done => canny_Sobel_1_U0_ap_done,
        ap_continue => canny_Sobel_1_U0_ap_continue,
        ap_idle => canny_Sobel_1_U0_ap_idle,
        ap_ready => canny_Sobel_1_U0_ap_ready,
        p_src_data_stream_V_dout => canny_Sobel_1_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => canny_Sobel_1_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => canny_Sobel_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => canny_Sobel_1_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => canny_Sobel_1_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => canny_Sobel_1_U0_p_dst_data_stream_V_write);

    canny_grad_computation_U0 : component canny_grad_computation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_grad_computation_U0_ap_start,
        ap_done => canny_grad_computation_U0_ap_done,
        ap_continue => canny_grad_computation_U0_ap_continue,
        ap_idle => canny_grad_computation_U0_ap_idle,
        ap_ready => canny_grad_computation_U0_ap_ready,
        grad_x_data_stream_V_dout => canny_grad_computation_U0_grad_x_data_stream_V_dout,
        grad_x_data_stream_V_empty_n => canny_grad_computation_U0_grad_x_data_stream_V_empty_n,
        grad_x_data_stream_V_read => canny_grad_computation_U0_grad_x_data_stream_V_read,
        grad_y_data_stream_V_dout => canny_grad_computation_U0_grad_y_data_stream_V_dout,
        grad_y_data_stream_V_empty_n => canny_grad_computation_U0_grad_y_data_stream_V_empty_n,
        grad_y_data_stream_V_read => canny_grad_computation_U0_grad_y_data_stream_V_read,
        grad_out_data_stream_V_din => canny_grad_computation_U0_grad_out_data_stream_V_din,
        grad_out_data_stream_V_full_n => canny_grad_computation_U0_grad_out_data_stream_V_full_n,
        grad_out_data_stream_V_write => canny_grad_computation_U0_grad_out_data_stream_V_write);

    canny_nonmax_supression_U0 : component canny_nonmax_supression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_nonmax_supression_U0_ap_start,
        ap_done => canny_nonmax_supression_U0_ap_done,
        ap_continue => canny_nonmax_supression_U0_ap_continue,
        ap_idle => canny_nonmax_supression_U0_ap_idle,
        ap_ready => canny_nonmax_supression_U0_ap_ready,
        grad_out_data_stream_V_dout => canny_nonmax_supression_U0_grad_out_data_stream_V_dout,
        grad_out_data_stream_V_empty_n => canny_nonmax_supression_U0_grad_out_data_stream_V_empty_n,
        grad_out_data_stream_V_read => canny_nonmax_supression_U0_grad_out_data_stream_V_read,
        supressed_data_stream_V_din => canny_nonmax_supression_U0_supressed_data_stream_V_din,
        supressed_data_stream_V_full_n => canny_nonmax_supression_U0_supressed_data_stream_V_full_n,
        supressed_data_stream_V_write => canny_nonmax_supression_U0_supressed_data_stream_V_write);

    canny_hysterisis_U0 : component canny_hysterisis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_hysterisis_U0_ap_start,
        ap_done => canny_hysterisis_U0_ap_done,
        ap_continue => canny_hysterisis_U0_ap_continue,
        ap_idle => canny_hysterisis_U0_ap_idle,
        ap_ready => canny_hysterisis_U0_ap_ready,
        supressed_data_stream_V_dout => canny_hysterisis_U0_supressed_data_stream_V_dout,
        supressed_data_stream_V_empty_n => canny_hysterisis_U0_supressed_data_stream_V_empty_n,
        supressed_data_stream_V_read => canny_hysterisis_U0_supressed_data_stream_V_read,
        hysterisis_Image_data_stream_V_din => canny_hysterisis_U0_hysterisis_Image_data_stream_V_din,
        hysterisis_Image_data_stream_V_full_n => canny_hysterisis_U0_hysterisis_Image_data_stream_V_full_n,
        hysterisis_Image_data_stream_V_write => canny_hysterisis_U0_hysterisis_Image_data_stream_V_write);

    canny_Mat2AXIvideo_8_1022_1022_0_U0 : component canny_Mat2AXIvideo_8_1022_1022_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start,
        ap_done => canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_done,
        ap_continue => canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_continue,
        ap_idle => canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_idle,
        ap_ready => canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_ready,
        img_data_stream_V_dout => canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_read,
        output_stream_TDATA => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDATA,
        output_stream_TVALID => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TVALID,
        output_stream_TREADY => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TREADY,
        output_stream_TKEEP => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TKEEP,
        output_stream_TSTRB => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TSTRB,
        output_stream_TUSER => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TUSER,
        output_stream_TLAST => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TLAST,
        output_stream_TID => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TID,
        output_stream_TDEST => canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDEST);

    img_0_rows_V_channel_U : component FIFO_canny_img_0_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel_din,
        if_full_n => img_0_rows_V_channel_full_n,
        if_write => img_0_rows_V_channel_write,
        if_dout => img_0_rows_V_channel_dout,
        if_empty_n => img_0_rows_V_channel_empty_n,
        if_read => img_0_rows_V_channel_read);

    img_0_cols_V_channel_U : component FIFO_canny_img_0_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel_din,
        if_full_n => img_0_cols_V_channel_full_n,
        if_write => img_0_cols_V_channel_write,
        if_dout => img_0_cols_V_channel_dout,
        if_empty_n => img_0_cols_V_channel_empty_n,
        if_read => img_0_cols_V_channel_read);

    img_0_data_stream_0_V_U : component FIFO_canny_img_0_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_0_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_V_full_n,
        if_write => img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_V_dout,
        if_empty_n => img_0_data_stream_0_V_empty_n,
        if_read => img_0_data_stream_0_V_read);

    img_0_rows_V_channel19_U : component FIFO_canny_img_0_rows_V_channel19
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_rows_V_channel19_U_ap_dummy_ce,
        if_write_ce => img_0_rows_V_channel19_U_ap_dummy_ce,
        if_din => img_0_rows_V_channel19_din,
        if_full_n => img_0_rows_V_channel19_full_n,
        if_write => img_0_rows_V_channel19_write,
        if_dout => img_0_rows_V_channel19_dout,
        if_empty_n => img_0_rows_V_channel19_empty_n,
        if_read => img_0_rows_V_channel19_read);

    img_0_cols_V_channel20_U : component FIFO_canny_img_0_cols_V_channel20
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_0_cols_V_channel20_U_ap_dummy_ce,
        if_write_ce => img_0_cols_V_channel20_U_ap_dummy_ce,
        if_din => img_0_cols_V_channel20_din,
        if_full_n => img_0_cols_V_channel20_full_n,
        if_write => img_0_cols_V_channel20_write,
        if_dout => img_0_cols_V_channel20_dout,
        if_empty_n => img_0_cols_V_channel20_empty_n,
        if_read => img_0_cols_V_channel20_read);

    img_1_data_stream_0_V_U : component FIFO_canny_img_1_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_1_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_1_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_V_full_n,
        if_write => img_1_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_V_dout,
        if_empty_n => img_1_data_stream_0_V_empty_n,
        if_read => img_1_data_stream_0_V_read);

    img_2_data_stream_0_V_U : component FIFO_canny_img_2_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_2_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_2_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_V_full_n,
        if_write => img_2_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_V_dout,
        if_empty_n => img_2_data_stream_0_V_empty_n,
        if_read => img_2_data_stream_0_V_read);

    img_3_data_stream_0_V_U : component FIFO_canny_img_3_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => img_3_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => img_3_data_stream_0_V_U_ap_dummy_ce,
        if_din => img_3_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_V_full_n,
        if_write => img_3_data_stream_0_V_write,
        if_dout => img_3_data_stream_0_V_dout,
        if_empty_n => img_3_data_stream_0_V_empty_n,
        if_read => img_3_data_stream_0_V_read);

    grad_x_data_stream_0_V_U : component FIFO_canny_grad_x_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grad_x_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => grad_x_data_stream_0_V_U_ap_dummy_ce,
        if_din => grad_x_data_stream_0_V_din,
        if_full_n => grad_x_data_stream_0_V_full_n,
        if_write => grad_x_data_stream_0_V_write,
        if_dout => grad_x_data_stream_0_V_dout,
        if_empty_n => grad_x_data_stream_0_V_empty_n,
        if_read => grad_x_data_stream_0_V_read);

    grad_y_data_stream_0_V_U : component FIFO_canny_grad_y_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grad_y_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => grad_y_data_stream_0_V_U_ap_dummy_ce,
        if_din => grad_y_data_stream_0_V_din,
        if_full_n => grad_y_data_stream_0_V_full_n,
        if_write => grad_y_data_stream_0_V_write,
        if_dout => grad_y_data_stream_0_V_dout,
        if_empty_n => grad_y_data_stream_0_V_empty_n,
        if_read => grad_y_data_stream_0_V_read);

    grad_out_data_stream_0_V_U : component FIFO_canny_grad_out_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => grad_out_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => grad_out_data_stream_0_V_U_ap_dummy_ce,
        if_din => grad_out_data_stream_0_V_din,
        if_full_n => grad_out_data_stream_0_V_full_n,
        if_write => grad_out_data_stream_0_V_write,
        if_dout => grad_out_data_stream_0_V_dout,
        if_empty_n => grad_out_data_stream_0_V_empty_n,
        if_read => grad_out_data_stream_0_V_read);

    supressed_Image_data_stream_0_U : component FIFO_canny_supressed_Image_data_stream_0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => supressed_Image_data_stream_0_U_ap_dummy_ce,
        if_write_ce => supressed_Image_data_stream_0_U_ap_dummy_ce,
        if_din => supressed_Image_data_stream_0_din,
        if_full_n => supressed_Image_data_stream_0_full_n,
        if_write => supressed_Image_data_stream_0_write,
        if_dout => supressed_Image_data_stream_0_dout,
        if_empty_n => supressed_Image_data_stream_0_empty_n,
        if_read => supressed_Image_data_stream_0_read);

    hysterisis_Image_data_stream_0_U : component FIFO_canny_hysterisis_Image_data_stream_0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => hysterisis_Image_data_stream_0_U_ap_dummy_ce,
        if_write_ce => hysterisis_Image_data_stream_0_U_ap_dummy_ce,
        if_din => hysterisis_Image_data_stream_0_din,
        if_full_n => hysterisis_Image_data_stream_0_full_n,
        if_write => hysterisis_Image_data_stream_0_write,
        if_dout => hysterisis_Image_data_stream_0_dout,
        if_empty_n => hysterisis_Image_data_stream_0_empty_n,
        if_read => hysterisis_Image_data_stream_0_read);





    -- ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0 assign process. --
    ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_done)) then 
                    ap_reg_procdone_canny_AXIvideo2Mat_8_1024_1024_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_Block_proc_U0 assign process. --
    ap_reg_procdone_canny_Block_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_Block_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_Block_proc_U0 <= ap_const_logic_0;
                elsif ((canny_Block_proc_U0_ap_done = ap_const_logic_1)) then 
                    ap_reg_procdone_canny_Block_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0 assign process. --
    ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_Duplicate_1024_1024_0_0_U0_ap_done)) then 
                    ap_reg_procdone_canny_Duplicate_1024_1024_0_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_GaussianBlur_U0 assign process. --
    ap_reg_procdone_canny_GaussianBlur_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_GaussianBlur_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_GaussianBlur_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_GaussianBlur_U0_ap_done)) then 
                    ap_reg_procdone_canny_GaussianBlur_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0 assign process. --
    ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_done)) then 
                    ap_reg_procdone_canny_Mat2AXIvideo_8_1022_1022_0_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_Sobel_1_U0 assign process. --
    ap_reg_procdone_canny_Sobel_1_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_Sobel_1_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_Sobel_1_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_Sobel_1_U0_ap_done)) then 
                    ap_reg_procdone_canny_Sobel_1_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_Sobel_U0 assign process. --
    ap_reg_procdone_canny_Sobel_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_Sobel_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_Sobel_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_Sobel_U0_ap_done)) then 
                    ap_reg_procdone_canny_Sobel_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_grad_computation_U0 assign process. --
    ap_reg_procdone_canny_grad_computation_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_grad_computation_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_grad_computation_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_grad_computation_U0_ap_done)) then 
                    ap_reg_procdone_canny_grad_computation_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_hysterisis_U0 assign process. --
    ap_reg_procdone_canny_hysterisis_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_hysterisis_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_hysterisis_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_hysterisis_U0_ap_done)) then 
                    ap_reg_procdone_canny_hysterisis_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_canny_nonmax_supression_U0 assign process. --
    ap_reg_procdone_canny_nonmax_supression_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_canny_nonmax_supression_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_canny_nonmax_supression_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = canny_nonmax_supression_U0_ap_done)) then 
                    ap_reg_procdone_canny_nonmax_supression_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- canny_Duplicate_1024_1024_0_0_U0_ap_start assign process. --
    canny_Duplicate_1024_1024_0_0_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_Duplicate_1024_1024_0_0_U0_ap_start <= ap_const_logic_0;
            else
                canny_Duplicate_1024_1024_0_0_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_GaussianBlur_U0_ap_start assign process. --
    canny_GaussianBlur_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_GaussianBlur_U0_ap_start <= ap_const_logic_0;
            else
                canny_GaussianBlur_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start assign process. --
    canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start <= ap_const_logic_0;
            else
                canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_Sobel_1_U0_ap_start assign process. --
    canny_Sobel_1_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_Sobel_1_U0_ap_start <= ap_const_logic_0;
            else
                canny_Sobel_1_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_Sobel_U0_ap_start assign process. --
    canny_Sobel_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_Sobel_U0_ap_start <= ap_const_logic_0;
            else
                canny_Sobel_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_grad_computation_U0_ap_start assign process. --
    canny_grad_computation_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_grad_computation_U0_ap_start <= ap_const_logic_0;
            else
                canny_grad_computation_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_hysterisis_U0_ap_start assign process. --
    canny_hysterisis_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_hysterisis_U0_ap_start <= ap_const_logic_0;
            else
                canny_hysterisis_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- canny_nonmax_supression_U0_ap_start assign process. --
    canny_nonmax_supression_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                canny_nonmax_supression_U0_ap_start <= ap_const_logic_0;
            else
                canny_nonmax_supression_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(canny_Block_proc_U0_ap_idle, canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_idle, canny_GaussianBlur_U0_ap_idle, canny_Duplicate_1024_1024_0_0_U0_ap_idle, canny_Sobel_U0_ap_idle, canny_Sobel_1_U0_ap_idle, canny_grad_computation_U0_ap_idle, canny_nonmax_supression_U0_ap_idle, canny_hysterisis_U0_ap_idle, canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_idle)
    begin
        if (((canny_Block_proc_U0_ap_idle = ap_const_logic_1) and (ap_const_logic_1 = canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_idle) and (ap_const_logic_1 = canny_GaussianBlur_U0_ap_idle) and (ap_const_logic_1 = canny_Duplicate_1024_1024_0_0_U0_ap_idle) and (ap_const_logic_1 = canny_Sobel_U0_ap_idle) and (ap_const_logic_1 = canny_Sobel_1_U0_ap_idle) and (ap_const_logic_1 = canny_grad_computation_U0_ap_idle) and (ap_const_logic_1 = canny_nonmax_supression_U0_ap_idle) and (ap_const_logic_1 = canny_hysterisis_U0_ap_idle) and (ap_const_logic_1 = canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_idle))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_done)
    begin
        if ((ap_const_logic_1 = canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_sig_top_allready <= canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_ready;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_continue <= ap_const_logic_1;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_ap_start <= ap_start;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_dout <= img_0_cols_V_channel_dout;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_empty_n <= img_0_cols_V_channel_empty_n;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_full_n <= img_0_cols_V_channel20_full_n;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_full_n <= img_0_data_stream_0_V_full_n;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_dout <= img_0_rows_V_channel_dout;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_empty_n <= img_0_rows_V_channel_empty_n;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_full_n <= img_0_rows_V_channel19_full_n;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDATA <= input_stream_TDATA;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TDEST <= input_stream_TDEST;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TID <= input_stream_TID;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TKEEP <= input_stream_TKEEP;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TLAST <= input_stream_TLAST;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TSTRB <= input_stream_TSTRB;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TUSER <= input_stream_TUSER;
    canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TVALID <= input_stream_TVALID;
    canny_Block_proc_U0_ap_continue <= ap_const_logic_1;
    canny_Block_proc_U0_ap_start <= ap_start;
    canny_Block_proc_U0_img_0_cols_V_out_full_n <= img_0_cols_V_channel_full_n;
    canny_Block_proc_U0_img_0_rows_V_out_full_n <= img_0_rows_V_channel_full_n;
    canny_Duplicate_1024_1024_0_0_U0_ap_continue <= ap_const_logic_1;
    canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_full_n <= img_2_data_stream_0_V_full_n;
    canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_full_n <= img_3_data_stream_0_V_full_n;
    canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_dout <= img_1_data_stream_0_V_dout;
    canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_empty_n <= img_1_data_stream_0_V_empty_n;
    canny_GaussianBlur_U0_ap_continue <= ap_const_logic_1;
    canny_GaussianBlur_U0_p_dst_data_stream_V_full_n <= img_1_data_stream_0_V_full_n;
    canny_GaussianBlur_U0_p_src_cols_V_dout <= img_0_cols_V_channel20_dout;
    canny_GaussianBlur_U0_p_src_cols_V_empty_n <= img_0_cols_V_channel20_empty_n;
    canny_GaussianBlur_U0_p_src_data_stream_V_dout <= img_0_data_stream_0_V_dout;
    canny_GaussianBlur_U0_p_src_data_stream_V_empty_n <= img_0_data_stream_0_V_empty_n;
    canny_GaussianBlur_U0_p_src_rows_V_dout <= img_0_rows_V_channel19_dout;
    canny_GaussianBlur_U0_p_src_rows_V_empty_n <= img_0_rows_V_channel19_empty_n;
    canny_Mat2AXIvideo_8_1022_1022_0_U0_ap_continue <= ap_sig_hs_continue;
    canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_dout <= hysterisis_Image_data_stream_0_dout;
    canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_empty_n <= hysterisis_Image_data_stream_0_empty_n;
    canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TREADY <= output_stream_TREADY;
    canny_Sobel_1_U0_ap_continue <= ap_const_logic_1;
    canny_Sobel_1_U0_p_dst_data_stream_V_full_n <= grad_y_data_stream_0_V_full_n;
    canny_Sobel_1_U0_p_src_data_stream_V_dout <= img_3_data_stream_0_V_dout;
    canny_Sobel_1_U0_p_src_data_stream_V_empty_n <= img_3_data_stream_0_V_empty_n;
    canny_Sobel_U0_ap_continue <= ap_const_logic_1;
    canny_Sobel_U0_p_dst_data_stream_V_full_n <= grad_x_data_stream_0_V_full_n;
    canny_Sobel_U0_p_src_data_stream_V_dout <= img_2_data_stream_0_V_dout;
    canny_Sobel_U0_p_src_data_stream_V_empty_n <= img_2_data_stream_0_V_empty_n;
    canny_grad_computation_U0_ap_continue <= ap_const_logic_1;
    canny_grad_computation_U0_grad_out_data_stream_V_full_n <= grad_out_data_stream_0_V_full_n;
    canny_grad_computation_U0_grad_x_data_stream_V_dout <= grad_x_data_stream_0_V_dout;
    canny_grad_computation_U0_grad_x_data_stream_V_empty_n <= grad_x_data_stream_0_V_empty_n;
    canny_grad_computation_U0_grad_y_data_stream_V_dout <= grad_y_data_stream_0_V_dout;
    canny_grad_computation_U0_grad_y_data_stream_V_empty_n <= grad_y_data_stream_0_V_empty_n;
    canny_hysterisis_U0_ap_continue <= ap_const_logic_1;
    canny_hysterisis_U0_hysterisis_Image_data_stream_V_full_n <= hysterisis_Image_data_stream_0_full_n;
    canny_hysterisis_U0_supressed_data_stream_V_dout <= supressed_Image_data_stream_0_dout;
    canny_hysterisis_U0_supressed_data_stream_V_empty_n <= supressed_Image_data_stream_0_empty_n;
    canny_nonmax_supression_U0_ap_continue <= ap_const_logic_1;
    canny_nonmax_supression_U0_grad_out_data_stream_V_dout <= grad_out_data_stream_0_V_dout;
    canny_nonmax_supression_U0_grad_out_data_stream_V_empty_n <= grad_out_data_stream_0_V_empty_n;
    canny_nonmax_supression_U0_supressed_data_stream_V_full_n <= supressed_Image_data_stream_0_full_n;
    grad_out_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    grad_out_data_stream_0_V_din <= canny_grad_computation_U0_grad_out_data_stream_V_din;
    grad_out_data_stream_0_V_read <= canny_nonmax_supression_U0_grad_out_data_stream_V_read;
    grad_out_data_stream_0_V_write <= canny_grad_computation_U0_grad_out_data_stream_V_write;
    grad_x_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    grad_x_data_stream_0_V_din <= canny_Sobel_U0_p_dst_data_stream_V_din;
    grad_x_data_stream_0_V_read <= canny_grad_computation_U0_grad_x_data_stream_V_read;
    grad_x_data_stream_0_V_write <= canny_Sobel_U0_p_dst_data_stream_V_write;
    grad_y_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    grad_y_data_stream_0_V_din <= canny_Sobel_1_U0_p_dst_data_stream_V_din;
    grad_y_data_stream_0_V_read <= canny_grad_computation_U0_grad_y_data_stream_V_read;
    grad_y_data_stream_0_V_write <= canny_Sobel_1_U0_p_dst_data_stream_V_write;
    hysterisis_Image_data_stream_0_U_ap_dummy_ce <= ap_const_logic_1;
    hysterisis_Image_data_stream_0_din <= canny_hysterisis_U0_hysterisis_Image_data_stream_V_din;
    hysterisis_Image_data_stream_0_read <= canny_Mat2AXIvideo_8_1022_1022_0_U0_img_data_stream_V_read;
    hysterisis_Image_data_stream_0_write <= canny_hysterisis_U0_hysterisis_Image_data_stream_V_write;
    img_0_cols_V_channel20_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel20_din <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_din;
    img_0_cols_V_channel20_read <= canny_GaussianBlur_U0_p_src_cols_V_read;
    img_0_cols_V_channel20_write <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_out_write;
    img_0_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_cols_V_channel_din <= canny_Block_proc_U0_img_0_cols_V_out_din;
    img_0_cols_V_channel_read <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_cols_V_read;
    img_0_cols_V_channel_write <= canny_Block_proc_U0_img_0_cols_V_out_write;
    img_0_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_data_stream_0_V_din <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_din;
    img_0_data_stream_0_V_read <= canny_GaussianBlur_U0_p_src_data_stream_V_read;
    img_0_data_stream_0_V_write <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_data_stream_V_write;
    img_0_rows_V_channel19_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel19_din <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_din;
    img_0_rows_V_channel19_read <= canny_GaussianBlur_U0_p_src_rows_V_read;
    img_0_rows_V_channel19_write <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_out_write;
    img_0_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    img_0_rows_V_channel_din <= canny_Block_proc_U0_img_0_rows_V_out_din;
    img_0_rows_V_channel_read <= canny_AXIvideo2Mat_8_1024_1024_0_U0_img_rows_V_read;
    img_0_rows_V_channel_write <= canny_Block_proc_U0_img_0_rows_V_out_write;
    img_1_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_1_data_stream_0_V_din <= canny_GaussianBlur_U0_p_dst_data_stream_V_din;
    img_1_data_stream_0_V_read <= canny_Duplicate_1024_1024_0_0_U0_src_data_stream_V_read;
    img_1_data_stream_0_V_write <= canny_GaussianBlur_U0_p_dst_data_stream_V_write;
    img_2_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_2_data_stream_0_V_din <= canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_din;
    img_2_data_stream_0_V_read <= canny_Sobel_U0_p_src_data_stream_V_read;
    img_2_data_stream_0_V_write <= canny_Duplicate_1024_1024_0_0_U0_dst1_data_stream_V_write;
    img_3_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    img_3_data_stream_0_V_din <= canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_din;
    img_3_data_stream_0_V_read <= canny_Sobel_1_U0_p_src_data_stream_V_read;
    img_3_data_stream_0_V_write <= canny_Duplicate_1024_1024_0_0_U0_dst2_data_stream_V_write;
    input_stream_TREADY <= canny_AXIvideo2Mat_8_1024_1024_0_U0_input_stream_TREADY;
    output_stream_TDATA <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDATA;
    output_stream_TDEST <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TDEST;
    output_stream_TID <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TID;
    output_stream_TKEEP <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TKEEP;
    output_stream_TLAST <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TLAST;
    output_stream_TSTRB <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TSTRB;
    output_stream_TUSER <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TUSER;
    output_stream_TVALID <= canny_Mat2AXIvideo_8_1022_1022_0_U0_output_stream_TVALID;
    supressed_Image_data_stream_0_U_ap_dummy_ce <= ap_const_logic_1;
    supressed_Image_data_stream_0_din <= canny_nonmax_supression_U0_supressed_data_stream_V_din;
    supressed_Image_data_stream_0_read <= canny_hysterisis_U0_supressed_data_stream_V_read;
    supressed_Image_data_stream_0_write <= canny_nonmax_supression_U0_supressed_data_stream_V_write;
end behav;
