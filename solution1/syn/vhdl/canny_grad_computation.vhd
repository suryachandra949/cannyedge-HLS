-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_grad_computation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grad_x_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    grad_x_data_stream_V_empty_n : IN STD_LOGIC;
    grad_x_data_stream_V_read : OUT STD_LOGIC;
    grad_y_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    grad_y_data_stream_V_empty_n : IN STD_LOGIC;
    grad_y_data_stream_V_read : OUT STD_LOGIC;
    grad_out_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    grad_out_data_stream_V_full_n : IN STD_LOGIC;
    grad_out_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of canny_grad_computation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal p_8_reg_94 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal i_V_fu_111_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_373 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_61 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_378_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_84 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_378_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_378_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_123_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal abscond_i_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abscond_i_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_abscond_i_reg_387_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_gx_fu_141_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal abs_gx_reg_392 : STD_LOGIC_VECTOR (7 downto 0);
    signal abs_gy_fu_161_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal abs_gy_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal element_grad_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal element_grad_reg_410 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_element_grad_reg_410_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_element_grad_reg_410_pp0_it3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_36_reg_415_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_38_reg_421_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult3_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult3_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_1_fu_288_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_1_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal rev2_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_307_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp1_reg_473 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_83 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_bdd_161 : BOOLEAN;
    signal neg_i_fu_129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal abscond_i1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_i1_fu_149_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_132_cast_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_131_cast_fu_169_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_214_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_cast_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ult2_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_cast_fu_211_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_40_fu_237_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal rev9_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_2_fu_300_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_cast_fu_275_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_cond_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_3_cast_fu_333_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp4_fu_340_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_6_fu_349_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal element_final_fu_357_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_105_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((exitcond_fu_117_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_105_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_fu_117_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_105_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((exitcond_fu_117_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_105_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- p_8_reg_94 assign process. --
    p_8_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_105_p2 = ap_const_lv1_0))) then 
                p_8_reg_94 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (exitcond_fu_117_p2 = ap_const_lv1_0))) then 
                p_8_reg_94 <= j_V_fu_123_p2;
            end if; 
        end if;
    end process;

    -- p_s_reg_83 assign process. --
    p_s_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((exitcond_fu_117_p2 = ap_const_lv1_0)))) then 
                p_s_reg_83 <= i_V_reg_373;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_161))) then 
                p_s_reg_83 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_378 = ap_const_lv1_0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                abs_gx_reg_392 <= abs_gx_fu_141_p3;
                abs_gy_reg_401 <= abs_gy_fu_161_p3;
                abscond_i_reg_387 <= abscond_i_fu_135_p2;
                element_grad_reg_410 <= element_grad_fu_177_p2;
                tmp_36_reg_415 <= tmp_36_fu_183_p2;
                tmp_38_reg_421 <= tmp_38_fu_189_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4))))) then
                ap_reg_ppstg_abscond_i_reg_387_pp0_it2 <= abscond_i_reg_387;
                ap_reg_ppstg_element_grad_reg_410_pp0_it2 <= element_grad_reg_410;
                ap_reg_ppstg_element_grad_reg_410_pp0_it3 <= ap_reg_ppstg_element_grad_reg_410_pp0_it2;
                ap_reg_ppstg_exitcond_reg_378_pp0_it2 <= ap_reg_ppstg_exitcond_reg_378_pp0_it1;
                ap_reg_ppstg_exitcond_reg_378_pp0_it3 <= ap_reg_ppstg_exitcond_reg_378_pp0_it2;
                ap_reg_ppstg_tmp_36_reg_415_pp0_it2 <= tmp_36_reg_415;
                ap_reg_ppstg_tmp_38_reg_421_pp0_it2 <= tmp_38_reg_421;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then
                ap_reg_ppstg_exitcond_reg_378_pp0_it1 <= exitcond_reg_378;
                exitcond_reg_378 <= exitcond_fu_117_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_378_pp0_it2))) then
                dir_g_1_reg_463 <= dir_g_1_fu_288_p3;
                or_cond7_reg_458 <= or_cond7_fu_261_p2;
                rev2_reg_468 <= rev2_fu_295_p2;
                sel_tmp1_reg_473 <= sel_tmp1_fu_307_p3;
                sel_tmp3_reg_478 <= sel_tmp3_fu_321_p2;
                tmp10_reg_483 <= tmp10_fu_327_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_V_reg_373 <= i_V_fu_111_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_378_pp0_it1))) then
                rev1_reg_442 <= rev1_fu_231_p2;
                tmp8_reg_432 <= tmp8_fu_203_p2;
                tmp_41_reg_447 <= tmp_41_fu_244_p2;
                ult1_reg_437 <= ult1_fu_221_p2;
                ult3_reg_453 <= ult3_fu_250_p2;
                ult_reg_427 <= ult_fu_195_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond4_fu_105_p2, exitcond_fu_117_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_sig_bdd_84, ap_reg_ppiten_pp0_it4, ap_sig_bdd_161)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_161)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_105_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((exitcond_fu_117_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not((exitcond_fu_117_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    abs_gx_fu_141_p3 <= 
        grad_x_data_stream_V_dout when (abscond_i_fu_135_p2(0) = '1') else 
        neg_i_fu_129_p2;
    abs_gy_fu_161_p3 <= 
        grad_y_data_stream_V_dout when (abscond_i1_fu_155_p2(0) = '1') else 
        neg_i1_fu_149_p2;
    abscond_i1_fu_155_p2 <= "0" when (grad_y_data_stream_V_dout = ap_const_lv8_0) else "1";
    abscond_i_fu_135_p2 <= "0" when (grad_x_data_stream_V_dout = ap_const_lv8_0) else "1";

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, exitcond4_fu_105_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_105_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond4_fu_105_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_105_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_161 assign process. --
    ap_sig_bdd_161_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_161 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_61 assign process. --
    ap_sig_bdd_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_61 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(grad_x_data_stream_V_empty_n, grad_y_data_stream_V_empty_n, exitcond_reg_378)
    begin
                ap_sig_bdd_72 <= (((grad_x_data_stream_V_empty_n = ap_const_logic_0) and (exitcond_reg_378 = ap_const_lv1_0)) or ((exitcond_reg_378 = ap_const_lv1_0) and (grad_y_data_stream_V_empty_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(grad_out_data_stream_V_full_n, ap_reg_ppstg_exitcond_reg_378_pp0_it3)
    begin
                ap_sig_bdd_84 <= ((grad_out_data_stream_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_378_pp0_it3));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_61)
    begin
        if (ap_sig_bdd_61) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    dir_g_1_fu_288_p3 <= 
        ap_const_lv2_2 when (tmp_41_reg_447(0) = '1') else 
        ap_const_lv2_1;
    dir_g_2_fu_300_p3 <= 
        ap_const_lv2_2 when (tmp_41_reg_447(0) = '1') else 
        ap_const_lv2_3;
    dir_g_3_cast_fu_333_p3 <= 
        ap_const_lv2_3 when (rev2_reg_468(0) = '1') else 
        ap_const_lv2_0;
    dir_g_6_fu_349_p3 <= 
        dir_g_3_cast_fu_333_p3 when (sel_tmp6_fu_345_p2(0) = '1') else 
        sel_tmp4_fu_340_p3;
    dir_g_cast_fu_275_p1 <= std_logic_vector(resize(unsigned(rev_fu_270_p2),2));
    element_final_fu_357_p3 <= (ap_reg_ppstg_element_grad_reg_410_pp0_it3 & dir_g_6_fu_349_p3);
    element_grad_fu_177_p2 <= std_logic_vector(unsigned(tmp_132_cast_fu_173_p1) + unsigned(tmp_131_cast_fu_169_p1));
    exitcond4_fu_105_p2 <= "1" when (p_s_reg_83 = ap_const_lv11_400) else "0";
    exitcond_fu_117_p2 <= "1" when (p_8_reg_94 = ap_const_lv11_400) else "0";
    grad_out_data_stream_V_din <= std_logic_vector(resize(unsigned(element_final_fu_357_p3),16));

    -- grad_out_data_stream_V_write assign process. --
    grad_out_data_stream_V_write_assign_proc : process(ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_378_pp0_it3, ap_sig_bdd_84, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_378_pp0_it3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            grad_out_data_stream_V_write <= ap_const_logic_1;
        else 
            grad_out_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- grad_x_data_stream_V_read assign process. --
    grad_x_data_stream_V_read_assign_proc : process(exitcond_reg_378, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            grad_x_data_stream_V_read <= ap_const_logic_1;
        else 
            grad_x_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- grad_y_data_stream_V_read assign process. --
    grad_y_data_stream_V_read_assign_proc : process(exitcond_reg_378, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_sig_bdd_72, ap_reg_ppiten_pp0_it1, ap_sig_bdd_84, ap_reg_ppiten_pp0_it4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (exitcond_reg_378 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_72 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_84 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))))) then 
            grad_y_data_stream_V_read <= ap_const_logic_1;
        else 
            grad_y_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_111_p2 <= std_logic_vector(unsigned(p_s_reg_83) + unsigned(ap_const_lv11_1));
    j_V_fu_123_p2 <= std_logic_vector(unsigned(p_8_reg_94) + unsigned(ap_const_lv11_1));
    neg_i1_fu_149_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(grad_y_data_stream_V_dout));
    neg_i_fu_129_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(grad_x_data_stream_V_dout));
    or_cond7_fu_261_p2 <= (rev9_fu_256_p2 or ap_reg_ppstg_tmp_36_reg_415_pp0_it2);
    or_cond8_fu_283_p2 <= (tmp9_fu_279_p2 or ap_reg_ppstg_abscond_i_reg_387_pp0_it2);
    or_cond_fu_266_p2 <= (tmp8_reg_432 or ap_reg_ppstg_tmp_36_reg_415_pp0_it2);
    rev1_fu_231_p2 <= (ult2_fu_227_p2 xor ap_const_lv1_1);
    rev2_fu_295_p2 <= (ult3_reg_453 xor ap_const_lv1_1);
    rev9_fu_256_p2 <= (ult_reg_427 xor ap_const_lv1_1);
    rev_fu_270_p2 <= (ult1_reg_437 xor ap_const_lv1_1);
    sel_tmp1_fu_307_p3 <= 
        dir_g_2_fu_300_p3 when (or_cond7_fu_261_p2(0) = '1') else 
        dir_g_cast_fu_275_p1;
    sel_tmp2_fu_315_p2 <= (or_cond_fu_266_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_321_p2 <= (or_cond7_fu_261_p2 and sel_tmp2_fu_315_p2);
    sel_tmp4_fu_340_p3 <= 
        dir_g_1_reg_463 when (sel_tmp3_reg_478(0) = '1') else 
        sel_tmp1_reg_473;
    sel_tmp6_fu_345_p2 <= (tmp10_reg_483 and or_cond7_reg_458);
    tmp10_fu_327_p2 <= (or_cond_fu_266_p2 and or_cond8_fu_283_p2);
    tmp8_fu_203_p2 <= (tmp_38_reg_421 or tmp_37_fu_199_p2);
    tmp9_fu_279_p2 <= (rev1_reg_442 or ap_reg_ppstg_tmp_38_reg_421_pp0_it2);
    tmp_131_cast_fu_169_p1 <= std_logic_vector(resize(unsigned(grad_x_data_stream_V_dout),9));
    tmp_132_cast_fu_173_p1 <= std_logic_vector(resize(unsigned(grad_y_data_stream_V_dout),9));
    tmp_136_cast_fu_208_p1 <= std_logic_vector(resize(unsigned(abs_gx_reg_392),9));
    tmp_137_cast_fu_211_p1 <= std_logic_vector(resize(unsigned(abs_gy_reg_401),9));
    tmp_36_fu_183_p2 <= "1" when (grad_x_data_stream_V_dout = ap_const_lv8_0) else "0";
    tmp_37_fu_199_p2 <= "1" when (unsigned(abs_gx_reg_392) > unsigned(abs_gy_reg_401)) else "0";
    tmp_38_fu_189_p2 <= "1" when (grad_y_data_stream_V_dout = ap_const_lv8_0) else "0";
    tmp_39_fu_214_p3 <= (abs_gy_reg_401 & ap_const_lv1_0);
    tmp_40_fu_237_p3 <= (abs_gx_reg_392 & ap_const_lv1_0);
    tmp_41_fu_244_p2 <= "1" when (unsigned(tmp_137_cast_fu_211_p1) > unsigned(tmp_40_fu_237_p3)) else "0";
    ult1_fu_221_p2 <= "1" when (unsigned(tmp_39_fu_214_p3) < unsigned(tmp_136_cast_fu_208_p1)) else "0";
    ult2_fu_227_p2 <= "1" when (unsigned(abs_gx_reg_392) < unsigned(abs_gy_reg_401)) else "0";
    ult3_fu_250_p2 <= "1" when (unsigned(tmp_40_fu_237_p3) < unsigned(tmp_137_cast_fu_211_p1)) else "0";
    ult_fu_195_p2 <= "1" when (unsigned(abs_gy_reg_401) < unsigned(abs_gx_reg_392)) else "0";
end behav;
