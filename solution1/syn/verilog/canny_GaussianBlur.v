// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module canny_GaussianBlur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [11:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [11:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [11:0] p_src_rows_V_read_reg_44;
reg    ap_sig_bdd_53;
reg   [11:0] p_src_cols_V_read_reg_49;
wire    grp_canny_Filter2D_1_fu_32_ap_start;
wire    grp_canny_Filter2D_1_fu_32_ap_done;
wire    grp_canny_Filter2D_1_fu_32_ap_idle;
wire    grp_canny_Filter2D_1_fu_32_ap_ready;
wire   [11:0] grp_canny_Filter2D_1_fu_32_p_src_rows_V_read;
wire   [11:0] grp_canny_Filter2D_1_fu_32_p_src_cols_V_read;
wire   [7:0] grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_dout;
wire    grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_empty_n;
wire    grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_read;
wire   [7:0] grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_din;
wire    grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_full_n;
wire    grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_write;
reg    grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_79;
reg   [1:0] ap_NS_fsm;


canny_Filter2D_1 grp_canny_Filter2D_1_fu_32(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_canny_Filter2D_1_fu_32_ap_start ),
    .ap_done( grp_canny_Filter2D_1_fu_32_ap_done ),
    .ap_idle( grp_canny_Filter2D_1_fu_32_ap_idle ),
    .ap_ready( grp_canny_Filter2D_1_fu_32_ap_ready ),
    .p_src_rows_V_read( grp_canny_Filter2D_1_fu_32_p_src_rows_V_read ),
    .p_src_cols_V_read( grp_canny_Filter2D_1_fu_32_p_src_cols_V_read ),
    .p_src_data_stream_V_dout( grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_dout ),
    .p_src_data_stream_V_empty_n( grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_empty_n ),
    .p_src_data_stream_V_read( grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_read ),
    .p_dst_data_stream_V_din( grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_din ),
    .p_dst_data_stream_V_full_n( grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_full_n ),
    .p_dst_data_stream_V_write( grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_write )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_canny_Filter2D_1_fu_32_ap_done))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_53)) begin
            grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_canny_Filter2D_1_fu_32_ap_ready)) begin
            grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_53)) begin
        p_src_cols_V_read_reg_49 <= p_src_cols_V_dout;
        p_src_rows_V_read_reg_44 <= p_src_rows_V_dout;
    end
end

always @ (ap_done_reg or grp_canny_Filter2D_1_fu_32_ap_done or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_canny_Filter2D_1_fu_32_ap_done)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (grp_canny_Filter2D_1_fu_32_ap_done or ap_sig_cseq_ST_st2_fsm_1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_canny_Filter2D_1_fu_32_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_79) begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_write or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        p_dst_data_stream_V_write = grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_write;
    end else begin
        p_dst_data_stream_V_write = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_53) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_53)) begin
        p_src_cols_V_read = ap_const_logic_1;
    end else begin
        p_src_cols_V_read = ap_const_logic_0;
    end
end

always @ (grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_read or ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        p_src_data_stream_V_read = grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_read;
    end else begin
        p_src_data_stream_V_read = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_53) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_53)) begin
        p_src_rows_V_read = ap_const_logic_1;
    end else begin
        p_src_rows_V_read = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_53 or grp_canny_Filter2D_1_fu_32_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_53) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_canny_Filter2D_1_fu_32_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_start or ap_done_reg or p_src_rows_V_empty_n or p_src_cols_V_empty_n) begin
    ap_sig_bdd_53 = ((p_src_rows_V_empty_n == ap_const_logic_0) | (p_src_cols_V_empty_n == ap_const_logic_0) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign grp_canny_Filter2D_1_fu_32_ap_start = grp_canny_Filter2D_1_fu_32_ap_start_ap_start_reg;

assign grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_full_n = p_dst_data_stream_V_full_n;

assign grp_canny_Filter2D_1_fu_32_p_src_cols_V_read = p_src_cols_V_read_reg_49;

assign grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_dout = p_src_data_stream_V_dout;

assign grp_canny_Filter2D_1_fu_32_p_src_data_stream_V_empty_n = p_src_data_stream_V_empty_n;

assign grp_canny_Filter2D_1_fu_32_p_src_rows_V_read = p_src_rows_V_read_reg_44;

assign p_dst_data_stream_V_din = grp_canny_Filter2D_1_fu_32_p_dst_data_stream_V_din;


endmodule //canny_GaussianBlur

